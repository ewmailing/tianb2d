/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package org.box2d.box2d;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.util.Log;
import org.appcelerator.titanium.util.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import android.app.Activity;
import android.view.View;
import android.os.Handler;

import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.Shape;
import com.badlogic.gdx.physics.box2d.CircleShape;
import com.badlogic.gdx.physics.box2d.PolygonShape;


// This proxy can be created by calling Box2d.createBox2dWorld({message: "hello world"})
@Kroll.proxy(creatableInModule=Box2dModule.class)
public class Box2dWorldProxy extends TiViewProxy
{
	// Standard Debugging variables
	private static final String LCAT = "Box2dWorldProxy";
	private static final boolean DBG = TiConfig.LOGD;

	private World theWorld;
	private Box2dWorld worldView;
	private ArrayList listOfBodies;

	private class Box2dWorld extends TiUIView
	
{
	// Standard Debugging variables
//	private static final String LCAT = "Box2dWorld";
//	private static final boolean DBG = TiConfig.LOGD;

		public Box2dWorld(TiViewProxy proxy) {
			super(proxy);
			LayoutArrangement arrangement = LayoutArrangement.DEFAULT;

			if (proxy.hasProperty(TiC.PROPERTY_LAYOUT)) {
				String layoutProperty = TiConvert.toString(proxy.getProperty(TiC.PROPERTY_LAYOUT));
				if (layoutProperty.equals(TiC.LAYOUT_HORIZONTAL)) {
					arrangement = LayoutArrangement.HORIZONTAL;
				} else if (layoutProperty.equals(TiC.LAYOUT_VERTICAL)) {
					arrangement = LayoutArrangement.VERTICAL;
				}
			}
			setNativeView(new TiCompositeLayout(proxy.getActivity(), arrangement));
		}

		@Override
		public void processProperties(KrollDict d)
		{
			super.processProperties(d);
		}
}


	// Constructor
	public Box2dWorldProxy()
	{
		super();
		
	//	synchronized(this)
		{
			Vector2 gravity = new Vector2(0.0f, -9.81f);
			theWorld = new com.badlogic.gdx.physics.box2d.World(gravity, false);
			theWorld.setContinuousPhysics(true);
			/*
			if (contactListener)
			{
				theWorld->SetContactListener(contactListener);
			}
			*/
		}
	}

	@Override
	public TiUIView createView(Activity activity)
	{
		Box2dWorld view = new Box2dWorld(this);
		worldView = view;
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;
		return view;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);
		
		if (options.containsKey("message")) {
			Log.d(LCAT, "example created with message: " + options.get("message"));
		}
	}
	
	protected void addBodyToView(TiViewProxy viewproxy)
	{
//		if (_destroyed==NO)
		{
//			[self _createWorld];
			//worldView.add(viewproxy);
		Log.d(LCAT, "addBodyToView viewproxy: " + viewproxy);
			this.add(viewproxy);
		}
	}


	// Methods
	//
	@Kroll.method	
	public void start()
	{
		final Handler h = new Handler();
		final int delay = (int)(1.0f/60.0f*1000f);//milli seconds

		h.postDelayed(new Runnable()
			{
				public void run()
				{
					//do something
					tick();
					h.postDelayed(this, delay); // milliseconds
				}
			},
			delay
		);
	}

	private void tick()
	{
		Log.d(LCAT, "tick : " );
		
		if(null != theWorld)
		{
			synchronized(this)
			{
		Log.d(LCAT, "tick synchronized: " );
				
				final int velocityIterations = 8;
				final int positionIterations = 1;
		
				// Instruct the world to perform a single step of simulation. It is
				// generally best to keep the time step and iterations fixed.
				theWorld.step(1.0f/60.0f, velocityIterations, positionIterations);

		//CGSize size = [[surface view] bounds].size;
		
		//Iterate over the bodies in the physics world
		Iterator<Body> body_iter = theWorld.getBodies();
		while(body_iter.hasNext())
		{
			Body current_body = body_iter.next();
			Object user_data = current_body.getUserData();
			/*
			if (ud != NULL && sizeof(ud)==sizeof(id) && [(id)ud isKindOfClass:[TiBox2dBodyProxy class]])
			{
				UIView *oneView = [[(TiBox2dBodyProxy *)ud viewproxy] view];
				
				// y Position subtracted because of flipped coordinate system
				CGPoint newCenter = CGPointMake(b->GetPosition().x * PTM_RATIO,
												size.height - b->GetPosition().y * PTM_RATIO);
				oneView.center = newCenter;
				
				CGAffineTransform transform = CGAffineTransformMakeRotation(- b->GetAngle());
				
				oneView.transform = transform;
			}
			*/
		}
				
			}
		}
	}
	@Kroll.method
	public void addBody(Object[] args)
	{
		synchronized(this)
		{

		TiViewProxy viewproxy = (TiViewProxy)args[0];
		HashMap props = (HashMap)args[1];
		Log.d(LCAT, "printing viewproxy: " + viewproxy);
			
		Log.d(LCAT, "printing props: " + props);

		
		/*
		Thread t = new Thread("Thread1") {
        @Override
        public void run() {
            // some code #2
            runOnUiThread(new Runnable() {
                public void run() {
                    // some code #3 (that needs to be ran in UI thread)
		addBodyToView(viewproxy);

                }
            });

        }
    };
    t.start();
    t.join();
*/
		/*
		   Activity_Name.this.runOnUiThread(new Runnable() {

            @Override
            public void run() {
                // your stuff to update the UI

            }
        });
*/
		final int PTM_RATIO = 16; // magic number from iOS version

		TiUIView ti_physical_view = viewproxy.getOrCreateView();

		Log.d(LCAT, "printing ti_physical_view: " + ti_physical_view);
		
		View native_physical_view = ti_physical_view.getNativeView();
		Log.d(LCAT, "printing native_physical_view: " + native_physical_view);
		
		int physical_width = native_physical_view.getWidth();
		int physical_height = native_physical_view.getHeight();
		int physical_left =  native_physical_view.getLeft();
		int physical_bottom =  native_physical_view.getBottom();
		int physical_center_x = (physical_width/2)+physical_left;
		int physical_center_y = (physical_height/2)+physical_bottom;

		int box_width = physical_width/PTM_RATIO/2;
		int box_height = physical_height/PTM_RATIO/2;


		Log.d(LCAT, "printing worldView: " + worldView);

		int surface_height = this.getOrCreateView().getNativeView().getHeight();
//		int surface_height = worldView.getNativeView().getHeight();

		// Define the dynamic body.
		BodyDef body_def = new BodyDef();
		body_def.type = BodyDef.BodyType.DynamicBody;
	
		body_def.position = new Vector2(physical_center_x/PTM_RATIO, (surface_height - physical_center_y)/PTM_RATIO);
	
    
		if(null==listOfBodies)
		{
			listOfBodies = new ArrayList();
		}
	
//	TiBox2dBodyProxy *bp = nil;
	
	if(null != theWorld && box_width > 0 && box_height > 0)
	{

		// Tell the physics world to create the body
		Body the_body = theWorld.createBody(body_def);
		// Define the dynamic body fixture.
		FixtureDef fixture_def = new FixtureDef();
		float radius = 0;
		Log.d(LCAT, "createBody: radius " + radius);
		
		Object radius_object = props.get("radius");
		if(null != radius_object)
		{
			radius = TiConvert.toFloat(radius_object);
		}


		if (radius > 0)
		{
			CircleShape circle = new CircleShape();
			circle.setRadius(radius / PTM_RATIO);
			fixture_def.shape = circle;
		}
		else
		{
			// Define another box shape for our dynamic body.
			
			PolygonShape shape = new PolygonShape();
			Object[] shape_objects = (Object[])props.get("shape");
			if(null != shape_objects)
			{
                int count = shape_objects.length;
				Vector2[] vertices = new Vector2[count/2];
                int x = 0;
                for (int c = 0; c < count; c+=2)
                {
                    vertices[x++] = new Vector2(
						TiConvert.toFloat(shape_objects[c])/PTM_RATIO,
						TiConvert.toFloat(shape_objects[c+1])/PTM_RATIO
					);

                }
                shape.set(vertices);
			}
            else
            {
                shape.setAsBox(box_width, box_height);
            }
			fixture_def.shape = shape;
		}

		float density = 3.0f;
		Object density_object = props.get("density");
		if(null != density_object)
		{
			density = TiConvert.toFloat(density_object);
		}
		fixture_def.density = density;

		float friction = 0.3f;
		Object friction_object = props.get("friction");
		if(null != friction_object)
		{
			friction = TiConvert.toFloat(friction_object);
		}
		fixture_def.friction = friction;
		
		float restitution = 0.5f;
		Object restitution_object = props.get("restitution");
		if(null != restitution_object)
		{
			restitution = TiConvert.toFloat(restitution_object);
		}
		fixture_def.restitution = restitution;

		the_body.createFixture(fixture_def);

		Object body_object = props.get("type");
		String body_string = TiConvert.toString(restitution_object, "dynamic");
		
		if(body_string.equals("dynamic"))
		{
			the_body.setType(BodyDef.BodyType.DynamicBody);		
		}
		else if(body_string.equals("static"))
		{
			the_body.setType(BodyDef.BodyType.StaticBody);		
		}
		else if(body_string.equals("kinematic"))
		{
			the_body.setType(BodyDef.BodyType.KinematicBody);		
		}


			/*
			// we abuse the tag property as pointer to the physical body
		physicalView.tag = (int)body;
		
		bp = [[TiBox2dBodyProxy alloc] initWithBody:body viewproxy:viewproxy pageContext:[self executionContext]];
		
		body->SetUserData(bp);
	
	[lock unlock];
	
	return bp;
		*/
		}
		}
	}




	@Kroll.method
	public void printMessage(String message)
	{
		Log.d(LCAT, "printing message: " + message);
	}


	@Kroll.getProperty @Kroll.method
	public String getMessage()
	{
        return "Hello World from my module";
	}

	@Kroll.setProperty @Kroll.method
	public void setMessage(String message)
	{
	    Log.d(LCAT, "Tried setting module message to: " + message);
	}
}
